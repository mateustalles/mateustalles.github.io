{"ast":null,"code":"import _toConsumableArray from\"/home/mateus/Documentos/Trybe/GitHubPages/mateustalles.github.io/projetos/movie-card-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/mateus/Documentos/Trybe/GitHubPages/mateustalles.github.io/projetos/movie-card-library/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import data from'./movieData';localStorage.setItem('movies',JSON.stringify(data));var readMovies=function readMovies(){return JSON.parse(localStorage.getItem('movies'));};var saveMovies=function saveMovies(movies){return localStorage.setItem('movies',JSON.stringify(movies));};export var getMovies=function getMovies(){return new Promise(function(resolve){setTimeout(function(){var movies=readMovies();resolve(movies);},2000);});};export var getMovie=function getMovie(movieId){var movie=readMovies().find(function(mov){return mov.id===parseInt(movieId,10);});return new Promise(function(resolve){setTimeout(function(){resolve(movie);},2000);});};export var updateMovie=function updateMovie(updatedMovie){var movies=readMovies().map(function(movie){if(movie.id===parseInt(updatedMovie.id,10)){return _objectSpread({},movie,{},updatedMovie);}return movie;});saveMovies(movies);return new Promise(function(resolve){setTimeout(function(){resolve('OK');},1000);});};export var createMovie=function createMovie(movieData){var movies=readMovies();var nextId=movies[movies.length-1].id+1;var newMovie=_objectSpread({},movieData,{id:nextId});movies=[].concat(_toConsumableArray(movies),[newMovie]);saveMovies(movies);return new Promise(function(resolve){setTimeout(function(){resolve('OK');},1000);});};export var deleteMovie=function deleteMovie(movieId){var movies=readMovies();movies=movies.filter(function(movie){return movie.id!==parseInt(movieId,10);});saveMovies(movies);return new Promise(function(resolve){setTimeout(function(){resolve({status:'OK'});},1000);});};","map":{"version":3,"sources":["/home/mateus/Documentos/Trybe/GitHubPages/mateustalles.github.io/projetos/movie-card-library/src/services/movieAPI.js"],"names":["data","localStorage","setItem","JSON","stringify","readMovies","parse","getItem","saveMovies","movies","getMovies","Promise","resolve","setTimeout","getMovie","movieId","movie","find","mov","id","parseInt","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status"],"mappings":"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","sourcesContent":["import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}